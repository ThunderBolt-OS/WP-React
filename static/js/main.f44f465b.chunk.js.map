{"version":3,"sources":["components/header.js","data/product_data.js","components/mainContent.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","product_card","id","product_name","description","price","currency","thumb","MainContent","console","log","listItems","map","item","key","src","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kNAEe,SAASA,IACpB,OACI,6BACI,yBAAKC,UAAU,QAAf,kBACA,4BACI,oCACA,4CACA,wCAEJ,yBAAKA,UAAU,UACX,uBAAGA,UAAU,iBACb,uBAAGA,UAAU,0BCb7B,IA0EeC,EA1EM,CACjB,CACIC,GAAI,EACJC,aAAc,OACdC,YAAa,6DACbC,MAAO,GACPC,SAAU,SACVC,MAAO,wDAEX,CACIL,GAAI,EACJC,aAAc,OACdC,YAAa,4CACbC,MAAO,GACPC,SAAU,SACVC,MAAO,wDAEX,CACIL,GAAI,EACJC,aAAc,8BACdC,YAAa,uDACbC,MAAO,GACPC,SAAU,SACVC,MAAO,wDAEX,CACIL,GAAI,EACJC,aAAc,iCACdC,YAAa,0EACbC,MAAO,GACPC,SAAU,SACVC,MAAO,0DAEX,CACIL,GAAI,EACJC,aAAc,iBACdC,YAAa,yDACbC,MAAO,GACPC,SAAU,SACVC,MAAO,6DAEX,CACIL,GAAI,EACJC,aAAc,uBACdC,YAAa,oEACbC,MAAO,GACPC,SAAU,SACVC,MAAO,mEAEX,CACIL,GAAI,EACJC,aAAc,qBACdC,YAAa,4CACbC,MAAO,IACPC,SAAU,SACVC,MAAO,qEAEX,CACIL,GAAI,EACJC,aAAc,eACdC,YAAa,gGACbC,MAAO,GACPC,SAAU,SACVC,MAAO,iEAEX,CACIL,GAAI,EACJC,aAAc,uBACdC,YAAa,8BACbC,MAAO,GACPC,SAAU,SACVC,MAAO,iEC7CAC,EAvBK,WAChBC,QAAQC,IAAIT,GACZ,IAAMU,EAAYV,EAAaW,KAAI,SAACC,GAAD,OAC/B,yBAAKb,UAAU,OAAOc,IAAKD,EAAKX,IAC5B,yBAAKF,UAAU,YACX,yBAAKe,IAAKF,EAAKN,SAEnB,yBAAKP,UAAU,eACX,4BAAKa,EAAKV,cACV,2BAAIU,EAAKT,aACT,uBAAGJ,UAAU,SAASa,EAAKR,MAAM,8BAAOQ,EAAKP,WAC7C,yBAAKN,UAAU,OAAf,oBAKZ,OACI,yBAAKA,UAAU,gBACX,4CACCW,ICpBE,SAASK,IACpB,OACI,yBAAKhB,UAAU,UACX,gEACA,yBAAKA,UAAU,UACX,uBAAGA,UAAU,mBACb,uBAAGA,UAAU,sBCQdiB,MAVf,WACE,OACE,yBAAKjB,UAAU,aACb,kBAACD,EAAD,MACA,kBAAC,EAAD,MACA,kBAACiB,EAAD,QCCcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.f44f465b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <nav>\r\n            <div className=\"logo\">Foods Of India</div>\r\n            <ul>\r\n                <li>Home</li>\r\n                <li>Explore More</li>\r\n                <li>Contact</li>\r\n            </ul>\r\n            <div className=\"search\">\r\n                <i className=\"fa fa-search\"></i>\r\n                <i className=\"fa fa-recipy-basket\"></i>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n","const product_card = [\r\n    {\r\n        id: 1,\r\n        product_name: \"Idli\",\r\n        description: \"Steamed batter with spiced ground coconut paste and Sambar\",\r\n        price: 55,\r\n        currency: \"₹\",\r\n        thumb: \"http://www.indiaenjoy.com/_img-iE/iFood-280/idli.jpg\"\r\n    },\r\n    {\r\n        id: 2,\r\n        product_name: \"Dosa\",\r\n        description: \"Flat Idli but has a potato masala filling\",\r\n        price: 70,\r\n        currency: \"₹\",\r\n        thumb: \"http://www.indiaenjoy.com/_img-iE/iFood-280/Dosa.jpg\"\r\n    },\r\n    {\r\n        id: 3,\r\n        product_name: \"Vada, like spiced doughnuts\",\r\n        description: \"Vada is the doughnut shaped brown rings on the plate\",\r\n        price: 50,\r\n        currency: \"₹\",\r\n        thumb: \"http://www.indiaenjoy.com/_img-iE/iFood-280/vada.jpg\"\r\n    },\r\n    {\r\n        id: 4,\r\n        product_name: \"Sambar, the South Indian Curry\",\r\n        description: \"Watery gravy made with special spices like Asafetida and tamarind paste\",\r\n        price: 35,\r\n        currency: \"₹\",\r\n        thumb: \"http://www.indiaenjoy.com/_img-iE/iFood-280/Sambar.jpg\"\r\n    },\r\n    {\r\n        id: 5,\r\n        product_name: \"Appam and Stew\",\r\n        description: \"Pancake with a thick center and paper thin lace border\",\r\n        price: 25,\r\n        currency: \"₹\",\r\n        thumb: \"http://www.indiaenjoy.com/_img-iE/iFood-280/AppamStew.jpg\"\r\n    },\r\n    {\r\n        id: 6,\r\n        product_name: \"South Indian Biryani\",\r\n        description: \"Biryani is a flavored rice dish cooked with meat, fragrant spices\",\r\n        price: 60,\r\n        currency: \"₹\",\r\n        thumb: \"http://www.indiaenjoy.com/_img-iE/iFood-280/malabar-biryani.jpg\"\r\n    },\r\n    {\r\n        id: 7,\r\n        product_name: \"South Indian Thali\",\r\n        description: \"All the different curries in small dishes\",\r\n        price: 350,\r\n        currency: \"₹\",\r\n        thumb: \"http://www.indiaenjoy.com/_img-iE/iFood-280/Tali-South-Indian.jpg\"\r\n    },\r\n    {\r\n        id: 8,\r\n        product_name: \"Kerala Sadya\",\r\n        description: \"Traditional festival meal served on a washed banana leaf with rice and many vegetable curries\",\r\n        price: 25,\r\n        currency: \"₹\",\r\n        thumb: \"http://www.indiaenjoy.com/_img-iE/iFood-280/kearala-sadya.jpg\"\r\n    },\r\n    {\r\n        id: 9,\r\n        product_name: \"Upma or Rava Kichadi\",\r\n        description: \"Common man's breakfast food\",\r\n        price: 35,\r\n        currency: \"₹\",\r\n        thumb: \"http://www.indiaenjoy.com/_img-iE/iFood-280/upma-khichdi.jpg\"\r\n    }\r\n]\r\nexport default product_card;","import React from 'react'\r\nimport product_card from \"../data/product_data\";\r\n\r\nconst MainContent = () => {\r\n    console.log(product_card);\r\n    const listItems = product_card.map((item) =>\r\n        <div className=\"card\" key={item.id}>\r\n            <div className=\"card_img\">\r\n                <img src={item.thumb} />\r\n            </div>\r\n            <div className=\"card_header\">\r\n                <h2>{item.product_name}</h2>\r\n                <p>{item.description}</p>\r\n                <p className=\"price\">{item.price}<span>{item.currency}</span></p>\r\n                <div className=\"btn\">View Recipe</div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n    return (\r\n        <div className=\"main_content\">\r\n            <h3>South Indian</h3>\r\n            {listItems}\r\n        </div>\r\n    )\r\n}\r\nexport default MainContent;\r\n","import React from 'react'\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <div className=\"footer\">\r\n            <p>Made With Love by Soham & Harshal</p>\r\n            <div className=\"social\">\r\n                <i className=\"fa fa-facebook\"></i>\r\n                <i className=\"fa fa-instagram\"></i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/header\";\r\nimport MainContent from \"./components/mainContent\";\r\nimport Footer from \"./components/footer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <Header />\r\n      <MainContent />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}